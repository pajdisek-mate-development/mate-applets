Description: Fix FTBFS when building --with-cpufreq=cpupower
Author: Mike Gabriel <mike.gabriel@das-netzwerkteam.de>

--- a/cpufreq/src/cpufreq-monitor-libcpufreq.c
+++ b/cpufreq/src/cpufreq-monitor-libcpufreq.c
@@ -19,11 +19,14 @@
  * Authors : Carlos García Campos <carlosgc@gnome.org>
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #include <glib.h>
 #include <glib/gi18n.h>
 
 #include <stdlib.h>
-#include <linux/version.h>
 #include <cpufreq.h>
 #include "cpufreq-monitor-libcpufreq.h"
 #include "cpufreq-utils.h"
@@ -36,8 +39,14 @@
 
 G_DEFINE_TYPE (CPUFreqMonitorLibcpufreq, cpufreq_monitor_libcpufreq, CPUFREQ_TYPE_MONITOR)
 
-typedef struct cpufreq_policy                CPUFreqPolicy;
+#ifdef HAVE_GET_FREQUENCIES 
+typedef struct cpufreq_frequencies CPUFreqFrequencyList;
+#define cpufreq_get_available_frequencies(cpu) cpufreq_get_frequencies ("available", cpu)
+#define cpufreq_put_available_frequencies(first) cpufreq_put_frequencies (first)
+#else
 typedef struct cpufreq_available_frequencies CPUFreqFrequencyList;
+#endif
+typedef struct cpufreq_policy                CPUFreqPolicy;
 typedef struct cpufreq_available_governors   CPUFreqGovernorList;
 
 static void
@@ -98,7 +107,7 @@
         return CPUFREQ_MONITOR (monitor);
 }
 
-#if LINUX_VERSION_CODE > KERNEL_VERSION(4, 7, 0)
+#ifdef HAVE_IS_CPU_ONLINE 
 extern int cpupower_is_cpu_online (unsigned int cpu);
 #endif
 
@@ -115,7 +124,7 @@
 		/* Check whether it failed because
 		 * cpu is not online.
 		 */
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 7, 0)
+#ifndef HAVE_IS_CPU_ONLINE
 		if (!cpufreq_cpu_exists (cpu)) {
 #else
 		if (cpupower_is_cpu_online (cpu)) {
--- a/configure.ac
+++ b/configure.ac
@@ -357,33 +357,51 @@
    enable_suid=no
 fi
 
-AC_ARG_WITH([cpufreq-lib],
-	AS_HELP_STRING([--with-cpufreq-lib=lib], [library to use for cpufreq applet @<:@default=cpufreq@:>@]),
-	[with_cpufreq_lib=$withval], [with_cpufreq_lib="cpupower"])
+build_cpufreq_applet=yes
+AS_IF([test "x$disable_cpufreq" = "xno"], [
+  case "${host}" in
+    *linux*)
+      AC_CHECK_HEADER([cpufreq.h], [
+        AC_CHECK_LIB([cpupower], [cpupower_is_cpu_online], [
+          AC_DEFINE([HAVE_IS_CPU_ONLINE], 1,
+                    [Define to 1 if cpupower_is_cpu_online() is available])
+          cpufreq_lib="cpupower"
 
-AC_CHECK_HEADER(cpufreq.h, have_libcpufreq=yes, have_libcpufreq=no)
-LIBCPUFREQ_LIBS=
-if test "x$have_libcpufreq" = "xyes"; then
-   AC_DEFINE([HAVE_LIBCPUFREQ], [1], [Have libcpufreq.])
-   LIBCPUFREQ_LIBS="-l$with_cpufreq_lib"
-fi
-AM_CONDITIONAL(HAVE_LIBCPUFREQ, test x$have_libcpufreq = xyes)
-AC_SUBST(LIBCPUFREQ_LIBS)
-
-build_cpufreq_applet=no
+          AC_CHECK_LIB([cpupower], [cpufreq_get_frequencies], [
+            AC_DEFINE([HAVE_GET_FREQUENCIES], 1,
+                      [Define to 1 if cpufreq_get_frequencies() is available])
+          ])
+        ], [
+          AC_CHECK_LIB([cpupower], [cpufreq_cpu_exists], [
+            cpufreq_lib="cpupower"
+          ], [
+            AC_CHECK_LIB([cpufreq], [cpufreq_cpu_exists], [
+              cpufreq_lib="cpufreq"
+            ], [cpufreq_lib=])
+          ])
+        ])
 
-if test x$disable_cpufreq = xno; then
-   case "${host}" in
-      *linux*)
-         build_cpufreq_applet=yes
-	 ;;
-      *)
-         AC_MSG_WARN([${host} is not supported by cpufreq applet, not building])
-	 build_cpufreq_applet=no
-	 ;;
-   esac
-fi
+        AS_IF([test "x$cpufreq_lib" != "x"], [
+          LIBCPUFREQ_LIBS="-l$cpufreq_lib"
+          AC_DEFINE([HAVE_LIBCPUFREQ], [1], [Have libcpufreq.])
+          AC_SUBST([LIBCPUFREQ_LIBS])
+        ], [
+          AC_MSG_WARN([*** cpufreq applet will not be built ***])
+          build_cpufreq_applet=no
+        ])
+      ], [
+        AC_MSG_WARN([*** can't find cpufreq.h, cpufreq applet will not be built ***])
+        build_cpufreq_applet=no
+      ])
+      ;;
+    *)
+      AC_MSG_WARN([${host} is not supported by cpufreq applet, not building])
+      build_cpufreq_applet=no
+      ;;
+  esac
+], [build_cpufreq_applet=no])
 
+AM_CONDITIONAL(HAVE_LIBCPUFREQ, test x$cpufreq_lib != x)
 AM_CONDITIONAL(BUILD_CPUFREQ_APPLET, test x$build_cpufreq_applet = xyes)
 AM_CONDITIONAL(BUILD_CPUFREQ_SELECTOR, test x$enable_selector = xyes)
 AM_CONDITIONAL(CPUFREQ_SELECTOR_SUID, test x$enable_suid = xyes)
--- a/cpufreq/src/cpufreq-selector/cpufreq-selector-libcpufreq.c
+++ b/cpufreq/src/cpufreq-selector/cpufreq-selector-libcpufreq.c
@@ -19,6 +19,10 @@
  * Authors : Carlos García Campos <carlosgc@gnome.org>
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #include <glib.h>
 #include <glib/gstdio.h>
 #include <cpufreq.h>
@@ -38,8 +42,15 @@
 
 G_DEFINE_TYPE (CPUFreqSelectorLibcpufreq, cpufreq_selector_libcpufreq, CPUFREQ_TYPE_SELECTOR)
 
-typedef struct cpufreq_policy                CPUFreqPolicy;
+#ifdef HAVE_GET_FREQUENCIES
+typedef struct cpufreq_frequencies CPUFreqFrequencyList;
+#define cpufreq_get_available_frequencies(cpu) cpufreq_get_frequencies ("available", cpu)
+#define cpufreq_put_available_frequencies(first) cpufreq_put_frequencies (first)
+#else
 typedef struct cpufreq_available_frequencies CPUFreqFrequencyList;
+#endif
+
+typedef struct cpufreq_policy                CPUFreqPolicy;
 typedef struct cpufreq_available_governors   CPUFreqGovernorList;
 
 static void
